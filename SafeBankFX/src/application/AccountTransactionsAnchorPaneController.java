package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.UUID;
import java.util.stream.Collectors;

import dao.SavingsAccountsDAO;
import dao.TransactionsDAO;
import dao.UsersDAO;
import enums.TransactionCategory;
import enums.TransactionMode;
import enums.TransactionType;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.ComboBox;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import models.SavingsAccount;
import models.Transaction;
import javafx.scene.control.TableColumn;

public class AccountTransactionsAnchorPaneController extends Controller implements Initializable {
	@FXML
	private Pane paneAccounts;
	@FXML
	private ComboBox<String> cbAccounts;
	@FXML
	private Button btnResetCBValue;
	@FXML
	private Label lblAccountBalance;
	@FXML
	private Label lblAccountBalanceValue;
	@FXML
	private TableView<Transaction> tblAccounts;
	@FXML
	private TableColumn<Transaction, String> tblClmTID;
	@FXML
	private TableColumn<Transaction, Long> tblClmAccNo;
	@FXML
	private TableColumn<Transaction, String> tblClmTName;
	@FXML
	private TableColumn<Transaction, Double> tblClmAmt;
	@FXML
	private TableColumn<Transaction, String> tblClmTType;
	@FXML
	private TableColumn<Transaction, Date> tblClmTDate;
	

	// Event Listener on ComboBox[#cbAccounts].onAction
	@FXML
	public void displayAccounts(ActionEvent event) throws IOException {
		
		// TODO Autogenerated
		String selectedAccountNumber = cbAccounts.getSelectionModel().getSelectedItem();
		if(selectedAccountNumber != null) {
			lblAccountBalance.setText("Account Balance : $ ");
			btnResetCBValue.setVisible(true);
			lblAccountBalance.setVisible(true);
			lblAccountBalanceValue.setVisible(true);
			tblAccounts.setVisible(true);
			
			System.out.println(selectedAccountNumber);
			Long accountNumber = Long.parseLong(selectedAccountNumber);
			SavingsAccount userAccount = 
					SavingsAccountsDAO
					.getSavingsAccountByAccountNumber(accountNumber);
			lblAccountBalance.setText(userAccount.getAccountBalance() + "");
			refreshState();
			List<Transaction> accountTransactions = 
					TransactionsDAO
					.getUserTransactions(user.getUserId().toString())
					.stream().filter(transaction -> 
						transaction.getTransactionType() == 
						TransactionType.ACCOUNT_TRANSACTION)
					.collect(Collectors.toList());
		        
			ObservableList<Transaction> transactions = 
		        		FXCollections.observableArrayList(accountTransactions);
					
			tblClmTID.setCellValueFactory(new PropertyValueFactory<>("TransactionId"));
			tblClmAccNo.setCellValueFactory(new PropertyValueFactory<>("AccountNumber"));
			tblClmTName.setCellValueFactory(new PropertyValueFactory<>("TransactionName"));
			tblClmAmt.setCellValueFactory(new PropertyValueFactory<>("Amount"));
			tblClmTType.setCellValueFactory(new PropertyValueFactory<>("TransactionType"));
			tblClmTDate.setCellValueFactory(new PropertyValueFactory<>("CreatedAt"));
			tblAccounts.setItems(transactions);
		}
		lblAccountBalance.setVisible(true);
		lblAccountBalanceValue.setVisible(true);
	}
	// Event Listener on Button[#btnResetCBValue].onAction
	@FXML
	public void clearSelectedValue(ActionEvent event) throws IOException {
		// TODO Autogenerated
		cbAccounts.getSelectionModel().clearSelection();
		cbAccounts.setButtonCell(new PromptButtonCell<>(cbAccounts.getPromptText()));
		lblAccountBalance.setVisible(false);
		lblAccountBalanceValue.setVisible(false);
		tblAccounts.setVisible(false);
		btnResetCBValue.setVisible(false);
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
//		//List of account numbers of current user
		refreshState();
		List<String> accountNumbers = user
				.getAccounts()
				.stream()
				.map(account -> account.getAccountNumber() + "")
				.collect(Collectors.toList());
		
		ObservableList<String> accountNumbersList = 
				FXCollections.observableArrayList(accountNumbers);
		
		cbAccounts.setItems(accountNumbersList);
		
		btnResetCBValue.setVisible(false);
		lblAccountBalance.setVisible(false);
		lblAccountBalanceValue.setVisible(false);
		tblAccounts.setVisible(false);
	}
}
